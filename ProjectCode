using System;
class project2{
    
    static void Main(){
        BS();
  }
  
  static void BS(){
  
  //Enter in code for user to enter in inputs for options
  
   // option objects
            OptionPrice obj1 = new OptionPrice(120.0, 100.0, 0.05, 0.2, 1, 'c');
            OptionPrice obj2 = new OptionPrice(120.0, 100.0, 0.05, 0.2, 1, 'p');
            double callPrice = obj1.bs();
            double putPrice = obj2.bs();


            // greek objects
            Greeks greeks1 = new Greeks(120.0, 100.0, 0.05, 0.2, 1, 'c');
            Greeks greeks2 = new Greeks(120.0, 100.0, 0.05, 0.2, 1, 'p');
  
  
       // output
            Console.WriteLine("............. Input Parameters ..................\n");
            Console.WriteLine("Initial stock price  : " + obj1.S1);
            Console.WriteLine("Strike price         : " + obj1.K1);
            Console.WriteLine("Risk free rate       : " + obj1.R);
            Console.WriteLine("Stock volatility     : " + obj1.Vol);
            Console.WriteLine("Time to maturity     : " + obj1.T1);
            Console.WriteLine("Option type          : " + obj1.Option);

            Console.WriteLine("\n............. Option Prices .....................\n");
            Console.WriteLine("Call price : " + callPrice);
            Console.WriteLine("Put price  : " + putPrice);

            Console.WriteLine("\n............. Greeks  ...........................\n");
            Console.WriteLine("Call option:");
            Console.WriteLine("Delta  : " + greeks1.delta());
            Console.WriteLine("Gamma  : " + greeks1.gamma());
            Console.WriteLine("Theta  : " + greeks1.theta());
            Console.WriteLine("Vega   : " + greeks1.vega());
            Console.WriteLine("Rho    : " + greeks1.rho());

            Console.WriteLine("\nPut option:");
            Console.WriteLine("Delta  : " + greeks2.delta());
            Console.WriteLine("Gamma  : " + greeks2.gamma());
            Console.WriteLine("Theta  : " + greeks2.theta());
            Console.WriteLine("Vega   : " + greeks2.vega());
            Console.WriteLine("Rho    : " + greeks2.rho());


            Console.WriteLine("\n..................................................");

  }

   }
   Public Class BSMOption
   {
   
   public Greeks()
            : base()
        {

        }

        // constructor calls Pricer defined constructor
        public Greeks(Double S, Double K, double r, double vol, double T, char option)
            : base(S, K, r, vol, T, option)
   
   }
   
   
   
   
   
   
   
   
   sealed class RandLib
{
    private Random r;
    public RandLib()
    {
        r = new Random();
    }
    public double NextDouble()
    {
        return r.NextDouble();
    }
    public double NextDouble(double b)
    {
        if (b == 0.0) return 0.0;
        if (b < 0.0) return NextDouble(b, 0.0);
        return b * r.NextDouble();
}
    public double NextDouble(double a, double b)
    {
         if (b == a) return a;
         if (b < a) return NextDouble(b, a);
         return a + (b - a) * r.NextDouble();
}

public double NextExponential()
{
    double x = 1.0 - r.NextDouble();
    return -Math.Log(x);
}
public double NextNormal()
{
    double U = 1.0;
    double V = 1.0;
    double S = (U * U) + (V * V);
    while ((S > 1.0) || (S == 0.0))
    {
        U = 2.0 * r.NextDouble() - 1.0;
        V = 2.0 * r.NextDouble() - 1.0;
        S = (U * U) + (V * V);
    }
    double tmp = Math.Sqrt(-2.0 * Math.Log(S) / S);
    double X = U * tmp;
    double Y = V * tmp;  // not used, wasted
    return X;
}
public double NextNormal(double mu, double sigma)
{
    return (mu + sigma * NextNormal());
}

} }
public static double ExponentialPDF(double x)
{
    if (x <= 0.0) return 0.0;
    return Math.Exp(-x);
}
public static double ExponentialCDF(double x)
{
    if (x <= 0.0) return 0.0;
    return 1.0 - Math.Exp(-x);
}
public static double NormalPDF(double x)
{
    return Math.Exp(-0.5 * x * x) / Math.Sqrt(2.0 * Math.PI);
}
public static double NormalCDF(double x)
{
if (x == 0.0) return 0.5;
if (x < 0.0) return 1.0 - NormalCDF(-x);
double[] b = { 0.2316419, 0.319381530, -0.356563782,
               1.781477937, -1.821255978, 1.330274429 };
double t = 1.0 / (1.0 + b[0] * x);
double sum = t * (b[1] + t * (b[2] + t * (b[3] + t * (b[4] + t * (b[5])))));
double Phi = 1.0 - NormalPDF(x) * sum;
return Phi;
}
}
